## Introduction

In the most abstract sense, a program takes in input, performs functions on the input and produces output.

{{basic.png}}

We will learn how a basic program in Java works.

[[[[
public class HelloWorld{
    public static void main(String[] args){
        System.out.println("Hello world!");
    }
}
]]]]

## [[Data Types]]

((((Data Types.Introduction))))

### [[Boolean]]

((((Boolean.Introduction))))

### [[Integer]]

((((Integer.Introduction))))

### [[Character]]

((((Character.Introduction))))

### [[Float]]

((((Float.Introduction))))

## [[Input Output]]

((((Input Output.Introduction))))

## Arithmetic Operations

Java includes many built in operations for basic operations.

Operation|Description|Example
-|-|-|-|-
z = x + y|Addition|z = 1 + 2,  z = 3
z = x - y|Subtraction|z = 3 - 1, z = 2
z = x * y|Multiplication|z = 3 * 2, z = 6
z = x / y|Integer division| z = 5 / 2, z = 2 or z = 9 / 3, z = 3
z = x % y|Modulus (or remainder)|z = 5 % 3, z = 2 or z = 6 % 2, z = 0
x++|Increment by 1|x=5, x++, x = 6
x--|Decrement by 1|x=5, x--, x = 4

Boolean operators are operations between two booleans (true or false). Boolean operators: 

Operation|Description|Example
-|-|-|-|-
x \|\| y|Or |T \|\| F = T, T \|\| T = T, F \|\| F = F
x && y|And | T && T = T, T && F = F, F && F = F
!x|Not|!F = T, !T = F
x == y|Equality| 1 == 1 = T, 1 == 3 = F
x != y|Inequality| 1 != 1 = F, 1 != 3 = T
x < y|Less than| 2 < 3 = T, 2 < 2 = F, 2 < 1 = F
x <= y|Less than or equal to| 2 <= 3 = T, 2 <= 2 = T, 2 <= 1 = F
x > y|Greater than|3 > 2 = T ,3 > 3 = F, 3 > 4 = F
x >= y|Greater than or equal to|3 >= 2 = T,3 >= 3 = T, 3 >= 4 = F
exp ? x : y| Ternary | true ? 3 : 4 = 3, (1 > 2) ? 3 : 4 = 4

Assignment assigns a value to a variable.

[[[[
int x = 3;
]]]]

Operation|Description|Example
-|-|-|-
x = y | Set x to y | x = 4 (x = 4)
x += y | Addition | x += 4 (x = 7)
x -= y | Subtraction | x -= 3 (x = 0)
x *= y | Multiplication | x *= 3 (x = 9)
x /= y | Division | x /= 2 (x = 1)
x %= y | Modulus | x %= 2 (x = 1)


## [[Control Structures]]

((((Control Structures.Introduction))))

### Conditional Statements

Let's say we wanted to send a greeting to someone depending on the time of day. If it's the morning, we should say 'Good Morning' otherwise we will say 'Hello'. Let's say we have the 24 hour time as an integer. How can we set a condition for morning and night? We use sometime called an "if statement". 

[[[[{lang-html}
if (test exp){
    do something;
else{
    do something else;
}
]]]]

If *test exp* evaluates to true, then the computer will *do something*, otherwise, it will *do something else*. So for example:

[[[[
if( time < 12){
   greeting = "Good Morning";
}else {
   greeting = "Hello";
}
]]]]

If the current time in 24 hour format for hours is less than 12 (noon) then the greeting will be "Good Morning". Otherwise (anything greater than or equal to 12) the greeting will be "Hello".

Let's say we wanted to make this more complex. If the time is morning (7am - 12pm) we should set the greeting to "Good Morning", if the time is in the afternoon (12pm - 5pm), we should say "Good Afternoon", if the time is at night (5pm - 12am) we should set the greeting to "Good Night" and from 12am to 7am we should set the greeting to "Go to sleep!". 

We can do this by using an "else if" which has the following structure:

[[[[{lang-html}
if (test exp){
    do something;
}
else if(test exp2){
    do something2;
}
else if(test exp3){
    do something3;
}else {
    do something else
}
]]]]

If *test exp* is true, the computer will *do something*, otherwise if *test exp2* is true, the computer will *do something2*, otherwise if *test exp3* is true, the computer will *do something3* otherwise the computer will *do something else*. Note that the computer will only execute *one* of the "do somethings". The computer evaluates each of the test expressions from top to bottom. As soon as one of the test expressions evaluate to true, the computer will "do something" and then stop checking the other test expressions.

So for example:

[[[[
if(time >= 7 && time <= 12){
    greeting = "Good Morning";
}
else if(time >= 13 && time <= 17){
   greeting = "Good Afternoon";
}
else if(time>=18 && time <= 24){
   greeting = "Good Night";
}
else {
   greeting = "Go to sleep!";
}
]]]]

## [[Loops]]

Let's say we wanted to calculate the 4th power of two without using the math power function. We can do this easily with code.

[[[[
int x = 2*2*2*2;
]]]]
How about 10?
[[[[
int x = 2*2*2*2*2*2*2*2*2*2;
]]]]
How about 100?
We could copy and paste this more times but this get very tedious. Most programming languages have something called a loop which does the same action a number amount of times. 

A for loop structure is as follows:
[[[[
for( first exp; test exp; next exp){
    //do something
}
]]]]

Here are the steps for a for loop:

1. Execute *first exp*
2. Evaluate *test exp*
3. If *test exp* evaluates to **true**, go to step 4, otherwise break
4. *do something*
5. Execute *next exp*
6. Go back to 3

[[[[
int i = 0;
int x = 2;
for(i=1;i<100;i++){
   x = x * 2;
}
]]]]

A while loop is similar to a for loop but simpler:

[[[[
while(test exp){
    //do something
}
]]]]

While the *test expression* is true, the computer will *do something*.

[[[[
int n = 10;
while(n>0){
   System.out.println(n);
   n--;
}
]]]]

We also have a do while loop which is similar to a while loop but it runs at least once: 

[[[[
do{
   //do something;
}while(test expression);
]]]]

The do-while loop will first *do something* and then as long as *test expression* is true, the computer will *do something*. Do while loops are useful if we need to get the value of something first before we keep looping.

[[[[
char c;
do{
  c = getChar();
}while(c=='N')
]]]]

## Exercises

1. (FizzBuzz) Print all numbers from 1 to 100. If the number is divisible by 3, print "Fizz". If the number is divisible by 5, print "Buzz". If it is divisible by both, print "FizzBuzz".

    Example (from 10 to 16)
    * 10 Buzz
    * 11
    * 12 Fizz
    * 13 
    * 14
    * 15 FizzBuzz
    * 16