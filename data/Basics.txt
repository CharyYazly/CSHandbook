## [[Data Types]]

We use closets or drawers to store our clothes and garages to store our cars. Similarly, we store different types of data in different kinds of data types. Most programming languages will support these data types and picking the right data type is important. 

To define a variable of a data type we use the follow syntax:

**datatype** **variable_name** = **init_val**;

* **datatype** is the type of variable
* **variable_name** is the name of the variable used
* **init_val** is the initial value of the variable

Example:
[[[[
int x = 3;
double y = -4.5;
]]]]

### [[Boolean]]

A boolean is stored in a bit that is either true or false. Booleans are usually used as flags to store if something is one one state or the other.

Data type| Number of bits | Range
-|-|-|-
bool| 2 bits | true or false

### [[Integer]]

An integer is any number that does not contain decimals. It is stored as binary number in memory. For example: 0, -5, 6 are integers.

Data type| Number of bits | Range
-|-|-|-
byte|8 bits| -128 to 127
short|16 bits | -32,768 to 32,767
int| 32 bits | −2,147,483,648 to 2,147,483,647
long| 64 bits | −9,223,372,036,854,775,808 to 9,223,372,036,854,755,807

### [[Character]]

A character is any letter or symbol. For example: 'a','B','8','!'.

Characters are usually stored as a number and then displayed as a character by the computer. When the computer converts a number to a character, it is called an encoding. For simple characters we store the character in 8 bits (0-255) and we can use it to represent English. This encoding is called ASCII. For example: '0' is 48 and 'B' is 66. There are other encodings like Unicode which uses more bits to convert to more languages such as Chinese or Russian. For the most part, we will just use ASCII.

Data type| Number of bits | Range
-|-|-|-
char| 8 bits | 256 bits

### [[Float]]

A float is a decimal stored as binary in memory. We use scientific notation to represent the decimal. Scientific notation is a decimal number < 10 times some exponent of 10. For example: 8.23 * 10^^4^^ is in scientific notation. Decimals can be stored in 32 bits or 64 bits. 

In a 32bit float, we have 1 bit for the sign (positive or negative), 23 bits for the significant figures (7 digits) and 8 bits for the exponent. 

Int a 64bit double we have 1 bit for the sign (positive or negative), 52 bits for the significant figures (16 digits) and 11 bits for the exponent. 

Data type| Number of bits | Range
-|-|-|-|-
float| 32 bits | 3.4e−038 to 3.4e+038
double| 64 bits| 1.7e−308 to 1.7e+308


## [[Operations]]

Java includes many built in operations for basic operations.

Operation|Description|Example
-|-|-|-|-
x + y|Addition|1 + 2 = 3
x - y|Subtraction|3 - 1 = 2
x * y|Multiplication|3 * 2 = 6
x / y|Integer division|5 / 2 = 2, 6 / 3 = 2
x % y|Modulus (or remainder)|5 % 3 = 2, 6 % 2 = 0
x++|Increment by 1|5++ = 6
x--|Decrement by 1|5-- = 4

Boolean operators are operations between two booleans (true or false). Boolean operators: 

Operation|Description|Example
-|-|-|-|-
x \|\| y|Or (One have to be true)|True \|\| False = True, True \|\| True = True, False \|\| False = False
x && y|And (Both have to be true| True && True = True, True && False = False, False && False = False
!x|Not|!False = true, !true = false
x == y|Equality| 1 == 1 = true, 1 == 3 = false
x != y|Inequality| 1 == 1 = false, 1 != 3 = true
x < y|Less than| 2 < 3 = true, 2 < 2 = false, 2 < 1 = false
x <= y|Less than or equal to| 2 <= 3 = true, 2 <= 2 = true, 2 <= 1 = false
x > y|Greater than|3 > 2 = true,3 > 3 = false, 3 > 4 = false
x >= y|Greater than or equal to|3 >= 2 = true,3 >= 3 = true, 3 >= 4 = false
exp ? x : y| Ternary (if exp is true use x otherwise use y) | true ? 3 : 4 = 3, (1 > 2) ? 3 : 4 = 4

Assignment assigns a value to a variable.

[[[[
int x = 3;
]]]]

Operation|Description|Example
-|-|-|-
x = y | Set x to y | x = 4 (x = 4)
x += y | Addition | x += 4 (x = 7)
x -= y | Subtraction | x -= 3 (x = 0)
x *= y | Multiplication | x *= 3 (x = 9)
x /= y | Division | x /= 2 (x = 1)
x %= y | Modulus | x %= 2 (x = 1)


## Conditional Statements

Let's say we wanted to send a greeting to someone depending on the time of day. If it's the morning, we should say 'Good Morning' otherwise we will say 'Hello'. Let's say we have the 24 hour time as an integer. How can we set a condition for morning and night? We use sometime called an "if statement". 

[[[[{lang-html}
if (test exp){
    do something;
else{
    do something else;
}
]]]]

If *test exp* evaluates to true, then the computer will *do something*, otherwise, it will *do something else*. So for example:

[[[[
if( time < 12){
   greeting = "Good Morning";
}else {
   greeting = "Hello";
}
]]]]

If the current time in 24 hour format for hours is less than 12 (noon) then the greeting will be "Good Morning". Otherwise (anything greater than or equal to 12) the greeting will be "Hello".

Let's say we wanted to make this more complex. If the time is morning (7-12) we should set the greeting to "Good Morning", if the time is in the afternoon (13-17), we should say "Good Afternoon", if the time is at night (17 to 24) we should set the greeting to "Good Night" and from 1 to 7 we should set the greeting to "Go to sleep!". 

We can do this by using an "else if" which has the following structure:

[[[[{lang-html}
if (test exp){
    do something;
}
else if(test exp2){
    do something2;
}
else if(test exp3){
    do something3;
}else {
    do something else
}
]]]]

If *test exp* is true, the computer will *do something*, otherwise if *test exp2* is true, the computer will *do something2*, otherwise if *test exp3* is true, the computer will *do something3* otherwise the computer will *do something else*. Note that the computer will only execute *one* of the "do somethings". The computer evaluates each of the test expressions from top to bottom. As soon as one of the test expressions evaluate to true, the computer will "do something" and then stop checking the other test expressions.

So for example:

[[[[
if(time >= 7 && time <= 12){
    greeting = "Good Morning";
}
else if(time >= 13 && time <= 17){
   greeting = "Good Afternoon";
}
else if(time>=18 && time <= 24){
   greeting = "Good Night";
}
else {
   greeting = "Go to sleep!";
}
]]]]

## [[Loops]]

Let's say we wanted to calculate the 4th power of two without using the math power function. We can do this easily with code.

[[[[
int x = 2*2*2*2;
]]]]
How about 10?
[[[[
int x = 2*2*2*2*2*2*2*2*2*2;
]]]]
How about 100?
We could copy and paste this more times but this get very tedious. Most programming languages have something called a loop which does the same action a number amount of times. 

A for loop structure is as follows:
[[[[
for( first exp; test exp; next exp){
    do something
}
]]]]

Here are the steps for a for loop:

1. Execute *first exp*
2. Evaluate *test exp*
3. If *test exp* evaluates to **true**, go to step 4, otherwise break
4. *do something*
5. Execute *next exp*
6. Go back to 3

[[[[
int i = 0;
int x = 2;
for(i=1;i<100;i++){
   x = x * 2;
}
]]]]