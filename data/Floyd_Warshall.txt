## Introduction

Floyd Warshall is a algorithm for finding the shortest distances between all pairs of nodes in a graph. Floyd Warshall can be used to find negative cycles in the graph. 

Description | Time | Space | Detect cycles?
----------|----|------|-----|----------
Computes shortest path between all pairs of nodes | O(n^^3^^) | O(n^^2^^) | Yes

### Prerequisites
* [[Shortest Path]]

## Implementation

Floyd-Warshall uses a [[dynamic programming|Dynamic Programming]] approach to finding the shortest path between node A and node B. Every path from node A to node B can be rewritten as a path from A to some node in between plus the path from the node in between to node B. The shortest path from A to B, is the shortest total path of the shortest path from A to a node in between plus the shortest path from the node in between to node B.

{{floydwarshall1.png}}



{{floydwarshall.png}}

### Formalization

Recursion

[[[[
Given a directed graph with N nodes and edges between nodes:
Let edge(i,j) be the weight of the edge from node i to node j in the graph
Let shortestPath(i,j) be the shortest path from i to j

Base Case:
shortestPath(i,i) = 0
shortestPath(i,j) = edge(i,j)

Recursion:
shortestPath(i,j) =  minmum of shortestPath(i,k) + shortestPath(k,j) for all unvisited nodes k
]]]]

### Code

[[[[
class edge{
	int weight,source,dest;
	public edge(int source,int dest,int weight){
		this.source = source;
		this.dest = dest;
		this.weight = weight;
	}
}
public static final int UNDEFINED = Integer.MIN_VALUE;
	
public static int[][] FloydWarshall(Vector<Vector<edge>> adjList){
	int n = adjList.size();
	//dist[i][j] is the minimum distance from i to j
	int[][] dist = new int[n][n];
	
	//initialize dist[i][j]
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			dist[i][j] = UNDEFINED;
		}
	}
	
	//dist[i][i] = 0
	for(int i=0;i<n;i++){
		dist[i][i]=0;
	}
	
	//initialize weights, dist[i][j] = edge from i to j
	for(int i=0;i<n;i++){
		for(int j=0;j<adjList.get(i).size();j++){
			
			edge e = adjList.get(i).get(j);
			dist[e.source][e.dest] = e.weight;
			
			System.out.println(e.source+" "+e.dest);
		}
	}
	
	for(int k=0;k<n;k++){
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				//If dist[i][k] and dist[k][j] have been set then use those values
				if(dist[i][k]!=UNDEFINED&&dist[k][j]!=UNDEFINED){
					//If the new distance is less than current or not used, then update
					int newDist = dist[i][k]+dist[k][j];
					if(dist[i][j] > newDist || dist[i][j]==UNDEFINED){
						dist[i][j] = newDist;
					}
				}
			}
		}
	}
	for(int i=0;i<n;i++){
		if(dist[i][i]<0){
			System.out.println("negative cycle");
		}
	}
	
	return dist;
}
]]]]

## Applications

Floyd Warshall is useful when you want to find the shortest distance between all possible pairs of nodes. 

## Exercises
1. Prove Floyd Warshall works
2. Extend Floyd Warshall to reconstruct the paths from each pair of nodes