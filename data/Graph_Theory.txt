## Introduction

*Next*: [[Advanced Graph Theory]]

Graphs are a set of objects where some pairs of objects  called **nodes** or **verticies** are usually connected by links called **edges**. The nodes here can be seen numbered from 1 to 6. There are edges connecting these various nodes.

{{graph.png}}

A **undirected** graph is a graph where an edge from A to B is the same as the edge from B to A for all edges. The above graph is undirected.

A **directed** or **bidirectional** graph is a graph where edges have direction meaning if there is an edge from A to B then there may not be an edge from B to A. 

{{digraph.png}}

A **subgraph** is a subset of edges and vertices within a graph.

A **directed acyclic graph** (DAG) is a graph with no directed cycles (see topological sorting). 

A **weighted** graph is a graph that contains weights or values assigned to each edge or node. Usually these weights act as the cost to reach/use that node.

## Representations

A graph can be represented as a adjacency matrix or a adjacency list.

### [[Adjacency Matrix]]

((((Adjacency Matrix.Introduction))))

### [[Adjacency List]]

((((Adjacency List.Introduction))))

## [[Tree]]

((((Tree.Introduction))))

### [[Spanning Tree]]

((((Spanning Tree.Introduction))))

## Shortest Path

The shortest path is defined as a path from one node to another while trying to minimize a certain property (least number of nodes, smallest total weight). However, shortest paths may have negative weights which leads to cycles. 

###Algorithms


| Algorithm | Desc | Time | Space | Detect cycles?
|----------|----|------|-----|----------
|[[Floyd Warshall]] | Computes shortest path between all pairs of nodes | O(n^^3^^) | O(n^^2^^) | Yes
|[[Bellman Ford]] | Computes shortest path between a pairs of nodes | O(n^^2^^) | O(n) | Yes
|[[Dijkstra's]] | Computes shortest path between a pair of nodes using the Greedy method | O(n log n) | O(n log n) | No


##[[Cycle detection]]

A cycle occurs when you start at a node and you can reach the same node from a path. 

{{cycle.png}}

{{cycle2.png}}

Note that [[trees|Trees]] cannot contain cycles. 

A cycle can be detected using a [[depth first search|Depth First Search]] on each unvisited node to check if the DFS tree has a backwards edge. 

## [[Topological Sorting]]

A topological sort or topological order of a directed graph is an order in which every node will come after its ancestors.

{{topsort.png}}

For example topological orders could be:

* (A, B, C, D, E, F G)
* (B, A, D, C, F, E, G)

But (B, A, C, F, D, E, G) is not a topological ordering because D is an ancestor of F and it comes after F.

## Strongly Connected

A graph is strongly connected if all nodes in the graph follows the conditions:

* There exists a path from that node to every other node
* All other nodes can visit that node.

In other words, all nodes in a strongly connected graph can visit each other.

{{strongconnected.png}}

To determine if a graph is strongly connected, we first pick a node and check that we can reach all nodes from it and this checks the first property. To check the second property, we can reverse all the edges of a node (A->B becomes B->A) and then check again that we can reach all nodes from the same node.


##[[Connected Components]]

A connected component is a subgraph where all the vertices in the subgraph connect to each other. Finding the number of distinct connected components can be done using a [[breadth first search|Breadth First Search]] or a [[depth first search|Depth First Search]]. 

{{connectedcomponents.png}}

{{connectedcomponents8.png}}

###[[Strongly Connected Components]]

A strongly connected component is a connected component but has the property that each vertex can visit any other vertex in the strongly connected component from any path. 
