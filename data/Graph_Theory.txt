## Introduction

Graphs are a set of objects where some pairs of objects  **nodes** are usually connected by links called **edges**. The nodes here can be seen numbered from 1 to 6. There are edges connecting these various nodes.

A **undirected** graph is a graph where the edge from A to B is the same as the edge from B to A

A **directed** or **bidirectional** graph is a graph where edges have direction meaning if there is an edge from A to B then there may not be an edge from B to A. 

A **subgraph** is a subset of edges and vertices within a graph.

A **directed acyclic graph** (DAG) is a graph with no directed cycles (see topological sorting). 

A **weighted** graph is a graph that contains weights or values assigned to each edge or node. Usually these weights act as the cost to reach/use that node.



## Representations

A graph can be represented as a adjacency matrix or a adjacency list.



### [[Adjacency Matrix]]

Adjacency matrixes use a matrix to store the edges between nodes. A 1 means a connection between x and y and a 0 means no connection. The edge weight could also be used instead of a 1. O(n^^2^^) where n is the number of nodes. For example the matrix for graph below is:


  |1|2|3|4|5|6
-|-|-|-|-|-|-
1 | 0 | 1 | 0 | 0 | 1 | 0
 2 | 1 | 0 | 1 | 0 | 1 | 0
 3 |0 | 1 | 0 | 1 | 0 | 0
 4 | 0 | 0 | 1 | 0 | 1 |1
 5 | 1 | 1 | 0 | 1 | 0 | 0
 6 | 0 | 0 | 0 | 1 | 0 | 0




### [[Adjacency List]]

Adjacency lists use an array of [[linked lists|Linked Lists]] to store all the edges. At x, you have a linked list of nodes that connect to that node. 1 connects to nodes 2 and 5, 2 connects to 1, 3 and 5 and so forth. O(m) storage where m is number of edges.

Node | edges
---|-----
 1 | 2, 5
2 | 1 3 5
3 | 2 4
4 | 3 5 6
5 | 1 2 4
6 |4



##Tree

A tree is a special graph with n-1 edges with n nodes. It has the special property that there will be only one path from one node to another node. Trees follow a recursive structure such that each child of a tree is a tree as well.

A **subtree** is a child tree of a tree.


###Spanning Tree

A spanning tree of a graph is a tree that spans all the nodes of the graph but only using some of the edges to connect all the nodes. 

A [[minimum spanning tree|Minimum Spanning Tree]] is the spanning tree that requires the minimum of some property such as total weight or total edges.

Spanning tree algorithms are essential in networking to ensure no loops occur when sending data through a network.


| Algorithm | Desc | Time | Space
|-
|[[Prim's]] | Using greedy method | O(n log n) | O(n^^2^^)
|[[Kruskal]] | Using connected components| O(n log n) | O(n^^2^^)


##Shortest Path

The shortest path is defined as a path from one node to another while trying to minimize a certain property (least number of nodes, smallest total weight). However, shortest paths may have negative weights leads to cycles. 



###Algorithms


| Algorithm | Desc | Time | Space | Detect cycles?
|----------|----|------|-----|----------
|[[Floyd Warshall]] | Computes shortest path between all pairs of nodes | O(n^^3^^) | O(n^^2^^) | Yes
|[[Bellman Ford]] | Computes shortest path between a pairs of nodes | O(n^^2^^) | O(n) | Yes
|[[Dijkstra's]] | Computes shortest path between a pair of nodes using the Greedy method | O(n log n) | O(n log n) | No


## [[Travelling Salesman Problem]]

The [[Travelling salesman]] is the problem where a salesman wants to visit all nodes in path while minimizing the total cost of weights used of edges. 



##[[Cycle detection]]

A cycle occurs in a graph when a duplicate node is encountered when traversing a tree using a [[depth first search|Depth First Search]]. Note that [[trees|Trees]] cannot contain cycles.

### [[Hamiltonian Cycle]]

A Hamiltonian path is a path in a graph that passes through all the nodes. 

A Hamiltonian cycle is a cycle in a graph that passes through all the nodes and ends back in the starting node.

##[[Connected Components]]

A connected component is a subgraph where all the vertices in the subgraph can reach each other. Finding the number of distinct connected components can be done using a [[breadth first search|Breadth First Search]] or a [[depth first search|Depth First Search]]. 

###[[Strongly Connected Components]]

A strongly connected component is a connected component but has the property that each vertex can visit any other vertex in the strongly connected component from any path.  This can be done using a [[breath first search|Breath First Search]].

## [[Topological Sorting]]

A topological sort is the order of vertices in a directed graph such that you don't visit any vertex you have already reached.


## [[Max flow problem]]

Suppose you have a network of pipes with a maximum water carrying capacity from point A to point B and you wanted to find the maximum rate of flow of water from A to B. For example:

* A->C (max 5)
* C->D (max 4)
* A->E (max 3)
* E->B (max 5)
* D->E (max 5)

There are two paths from A to be B, (A->C->D->E->B) and (A->E->B)

From A->C->D->E, the max flow is 4 because D->E is the limit factor. Even though D->E has a carrying capacity of 5, only 4 units of water will pass from D->E because only 4 units of water passed into D from C. From A->E, the max flow is 3 so at E we have a total of 8 units of water. However the carrying capacity from E->B is only 5 so the max flow from A->B is only 5.

### [[Ford-Fulkerson]]

Ford-Fulkerson is an algorithm that solves the max-flow problem using residual graphs.