## Introduction

Ternary search is a search that finds a local minimum or maximum value in a function given an interval from A to B. 

If there are multiple local minimum and maximum values, ternary search will only find one of them but it will not necessarily be the maximum or minimum.

{{ternarysearch.png}}

## Implementation

Suppose we have a function f(x) with only one max point between A and B. We want to find the point (M, f(M)) where f(M) is the maximum between A and B.

We split the range from A to B into three intervals. At every iteration of our algorithm, we can narrow down the range by 1/3 and we have a new interval. At every step, we can remove one of the intervals based on the following:

Let mvv1vv by 1/3 of the way from A and B and let mvv2vv be 2/3 of the way from B.

{{ternarysearch.png}}

**Case 1** : f(mvv1vv) < f(mvv2vv)

 * **Case 1.1**:  mvv1vv < mvv2vv < M, so mvv1vv < M

    {{ternarycase11.png}}
        
 * **Case 1.2**: mvv1vv < M < mvv2vv, so mvv1vv < M
        
    {{ternarycase12.png}}
        
 * **Case 1.3**: M < mvv1vv < mvv2vv is not possible.

Thus if f(mvv1vv) < f(mvv2vv), then mvv1vv < M, so we only need to search from mvv1vv to B.
{{ternarycase1.png}}

**Case 2**: f(mvv1vv) >= f(mvv2vv)

 * **Case 2.1**: mvv1vv < M < mvv2vv, so M < mvv2vv

    {{ternarycase21.png}}

 * **Case 2.2**: M < mvv1vv < mvv2vv, so M < mvv2vv

    {{ternarycase22.png}}

 * **Case 2.3**: mvv1vv < mvv2vv < M is not possible

Thus, if f(mvv1vv) >= f(mvv2vv), then M < mvv2vv, so we only need to search from A to mvv2vv. 

{{ternarycase2.png}}

Therefore, based on the values of f(mvv1vv) and f(mvv2vv), we can always remove a third of the range. We can keep repeating this until the range is within a very small threshold such as 0.0001.

### Example

Example of ternary search:

Suppose we have a function f(x) with a maximum point between A and B.

{{ternarysearch.png}}

We find mvv1vv (1/3) point and mvv2vv (2/3) point between A and B. 

{{ternarysearch2.png}}

Since f(mvv1vv) > f(mvv2vv), then we can reduce the range from A to mvv2vv. We find the new mvv1vv and mvv2vv points. 

{{ternarysearch3.png}}

Since f(mvv1vv) < f(mvv2vv), then we can reduce the range from mvv1vv to B. We find the new mvv1vv and mvv2vv points. 

{{ternarysearch4.png}}

Since f(mvv1vv) < f(mvv2vv), then we can reduce the range from mvv1vv to B. We find the new mvv1vv and mvv2vv points.

{{ternarysearch5.png}}

Since f(mvv1vv) < f(mvv2vv), then we can reduce the range from mvv1vv to B. We find the new mvv1vv and mvv2vv points. 

{{ternarysearch6.png}}

We keep repeating this until we narrow down the range to within a small threshold and we can find the point where f(x) is maximum.

{{ternarysearch7.png}}

### Formalization

[[[[
Let f(x) be the function.
Let (a, b) be interval of search.

Let tern(a,b) return M where f(M) is the maximum.

Let m1 = a + (b - a) / 3
Let m2 = a + (b - a) * 2 / 3

tern(a,b) = (a + b) / 2 if |f(a) - f(b)| < epsilon
tern(a,b) = tern(m1, b) if f(a) < f(b)
tern(a,b) = tern(a, m2) otherwise
]]]]

### Code

[[[[
public double tern(double a,double b){
  if (Math.abs(f(a) - f(b)) < 0.0001) {
    return (a + b) / 2.0;
  }
  double m1 = a + (b - a) / 3.0;
  double m2 = a + (b - a) * 2.0 / 3.0;
  if (f(m1) < f(m2)) {
    return tern(m1, b);
  } else {
    return tern(a, m2);
  }
}
]]]]