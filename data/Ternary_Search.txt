## Introduction

Ternary search is a search that find local minimum or maximum values in a function given the interval between A and B. 

If there are multiple local minimum and maximum values, ternary search will find one of them but not necessarily the maximum value of all points.

{{ternarysearch.png}}

## Implementation

Let's say we have a function f(x) with only one max point between A and B.

Let m1 by 1/3 of the way from A and B and let m2 be 2/3 of the way from B.

{{ternarysearch.png}}

### Proof

**Case 1** : f(m1) < f(m2)

 * **Case 1.1**:  m1 < m2 < x

    {{ternarycase11.png}}
        
 * **Case 1.2**: m1<x<m2
        
    {{ternarycase12.png}}
        
 * x < m1 < m2 is not possible.

If f(m1) < f(m2) then the max point must be in the middle third or last third.

{{ternarycase1.png}}

**Case 2**: f(m1) >= f(m2)

 * **Case 2.1**: m1 < x < m2

    {{ternarycase21.png}}

 * **Case 2.2**: x < m1 < m2

    {{ternarycase22.png}}

 * m1 < m2 < x is not possible

If f(m1) >= f(m2) then the max point must be in the first third or middle third.

{{ternarycase2.png}}

### Example

Using the above proof, we can use ternary search to find the maximum point.

{{ternarysearch.png}}

{{ternarysearch2.png}}

{{ternarysearch3.png}}

{{ternarysearch4.png}}

{{ternarysearch5.png}}

{{ternarysearch6.png}}

{{ternarysearch7.png}}

### Formalization

[[[[
Let f(x) be the function 
Let A,B be interval

Let tern(a,b) return x where f(x) = maximum

Let m1 = a + ( b - a ) / 3,
m2 = a + (b - a) * 2 / 3

tern(a,b) = { if |f(a) - f(b)| < epsilon    (a + b) / 2 
            { if f(a) < f(b)             tern(m1,b)
            { else                       tern(a,m2)
]]]]

### Code

[[[[
public double tern(double a,double b){
  if(Math.abs(f(a) - f(b)) < 0.0001) {
    return (a + b) / 2.0;
  }
  double m1 = a + (b - a) / 3.0;
  double m2 = a + (b - a) * 2 / 3;
  if(f(a) < f(b)) {
    return tern(m1, b);
  } else {
    return tern(a, m2);
  }
}
]]]]