## Introduction

Imagine you are standing in line for a restaurant. Whoever is first in line will be served and whoever is last in line will be served last. People can be served while more people join the line and the line may get very long because the time it takes to serve one person is long while more people join the queue. This line is also called a queue.

{{queue.png}}

{{queue2.png}}

A **queue** is an abstract data type with the property that it can only have removal from the front and insertion from the back (FIFI, first in first out). Removal from the front is called "pop" or "dequeue". Insertion from the back is called "push" or "enqueue".

Queues are usually implemented as a linked list because its memory size changes as more elements and pushed or popped and insertion from the front is more efficient.

Queues are often used for buffer systems, for example a text message service. The messages that arrive at the server first are relayed first and the messages that arrive later are relayed later. If there are too many text messages in the system such that the rate  texts are received overwhelm the number of texts that are sent the buffer may overflow and messages will get dropped. Most of the time this won't happen because the systems are designed to handle large loads, but if there were an emergency that caused everyone to start texting many texts could be dropped.

### Prerequisites
* [[Linked List]]

## Implementation
We can implement a queue most efficiently using a linked list because it has an efficient memory allocation. 

| Implementation | Pop | Push
|-
| [[Linked List]] | O(1) | O(1)

## Exercises

1. Given a list of letters representing instructions where the first instruction is, output what the final list should look like after N instructions are executed. 
    * A. Add B to the end of the list of instructions
    * B. Do nothing
    * C. Add two A's to the front of the list of instructions

    Example:
    * ABC
    * BCB
    * CB
    * AAB
    * ABB
    * BBB
    * BB
    * B
