## Introduction

**Prerequisites**: [[Recursion]], [[Stack]]

A depth first search on a tree is a traversal of a tree that goes as far down as a branch as possible and then back.

A DFS can also be used on a graph to transverse it by ignoring nodes that have already been visited.

A DFS requires a stack but most the time DFS is implemented with recursion which uses the system stack. So most of the time you do not need an explicit stack.

{{dfs.png}}

## Implementation

Most of the time, DFS is implemented using recursion and it is very short and simple to code.

[[[[

public class Tree {
	int value;
	Tree left;
	Tree right;
}
]]]]

### Binary Tree Transversal

{{dfs.png}}

Implementation for outputting a binary tree in order from left to right using DFS

[[[[
/**
 * Performs a DFS on a binary tree
 * tree - current tree DFS is at
 */
public static void DFS(Tree cur){
	if(cur==null)return;
	DFS(cur.left);
	System.out.println(cur.value);
	DFS(cur.right);
}
]]]]

### Binary Tree Preorder

{{dfs-preorder.png}}

Implementation for outputting a binary tree in DFS pre order

[[[[
/**
 * Performs a DFS on a binary tree
 * tree - current tree DFS is at
 */
public static void DFS(Tree cur){
	if(cur==null)return;
	System.out.println(cur.value);
	DFS(cur.left);
	DFS(cur.right);
}
]]]]

### Binary Tree Postorder

{{dfs-postorder.png}}

Implementation for outputting a binary tree in DFS post order

[[[[
/**
 * Performs a DFS on a binary tree
 * tree - current tree DFS is at
 */
public static void DFS(Tree cur){
	if(cur==null)return;
	DFS(cur.left);
	DFS(cur.right);
	System.out.println(cur.value);
}
]]]]

### Graph Transversal

This is a DFS implementation for traversing a bidirectional graph with positive weights.

[[[[
/**
 * Performs a DFS on a graph
 * adjMatrix - Adjacency matrix for a graph with positive edges. 0 indicates no edge.
 * cur - Current node the DFS is at
 * visited - Mutable array which keeps track of which nodes have been visited already
 */
public static void DFS_graph(int[][] adjMatrix,int cur,boolean[] visited){
	if(visited[cur])return;
	visited[cur] = true;
	System.out.println(cur);
	for(int i=0;i<adjMatrix.length;i++){
		if(adjMatrix[cur][i]>0)DFS_graph(adjMatrix,i,visited);
	}
	return;
}

]]]]

## Memory

Since DFS goes as deep as possible before going back, the stack we use will need to store at least the depth of the tree. 

## Exercises

1. Given a binary tree, find the height of it (the longest path from root to leaf)
2. Given a graph, determine if it contains a cycle.
3. Given a node and a binary tree, find the next node for post order, pre order and normal order.
