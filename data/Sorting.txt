## Introduction

Sorting is arranging an array of n elements in either increasing or decreasing order by some property. It is very useful in computer science for efficiency in other algorithms that usually require a search.

A stable sort is a sort that can preserve sorting of other properties. For example if we have 

(3,G), (1,G), (3, A), (6 K), (1,B) 

and we want to sort by the first property in increasing order, we will have: 

(1, G) (1,B) (3,G), (3,A) (6 K). 

If we sort again by the second property we have (1,B) (3, A) (1, G) (3, G) (6,K) then the sort is stable as the first sort is preserved. However if we had (1,B) (3, A) (3, G) (1, G) (6, K), then the sort would be unstable. 

##Slow Sorts
 Name | Runtime
-|-
[[Bubble Sort]] | O(n^^2^^)
[[Selection Sort]] | O(n^^2^^)
[[Insertion Sort]] | O(n^^2^^)

##Fast Sorts
 Name | Runtime
-|-
[[Heap Sort]] | O(nlogn)
[[Merge Sort]] | O(nlogn)
[[Quick Sort]] | O(nlogn)

## Exercises
1. Given two sorted arrays of N numbers, merge the two arrays into an single array of size 2N.
2. Find the minimum number of swaps to sort an array
3. Find the minimum number of adjacent swaps to sort an array