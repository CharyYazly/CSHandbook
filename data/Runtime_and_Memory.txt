## Introduction

Why is it that computers are a lot better at humans at one thing but humans are better than other things than computers? It's because computers are super fast at making calculation than computers but humans have much more "memory" than computers currently do. Computers can add two numbers together much more quickly than any human can. However, the human brain has about 100 billion neurons with 100 trillion connections between neurons. The neurons and connections allow us to store lots and lots of information in our brains and allows us to easily recognize patterns much better than computers. For example it is very easy for us to identify different objects around us (eg we can differentiate between an apple and an orange), but it is difficult for a computer to do this. 

|Brain|Computer
-|-|-
Memory|2.5 petabytes (3 million hours of tv shows)|16GB RAM
Processing|


There are many different methods of implementing different things but most of the time we care most about implementations that are the fastest and use the least amount of memory. Let's go through some basic benchmarks about computers that you should know. Adding two numbers takes a nanosecond (1 billionth of a second) for an average computer to process. For practical purposes, we'll assume that the average computer program can hold up to 1GB or RAM or about 250 million integers. 

When we compare how efficient algorithms or data structures are to another we use something called Big O notation to describe it. Usually every algorithm and data structure will depend on some inputs and the time it takes to compute something or the storage size needed will depend on that input. The Big O notation takes the largest factor of an input to compare computation times / memory usage. When we take the largest factor, we ignore smaller factors and constants because they do not matter at very large values. 

For example we want to store an array of N integers. We will need an array of size of N. We say that it takes O(N) memory. If we wanted to go through this array of N integers and find the greatest element, we keep a current max value and go through the array and if we saw a value greater than the max value we would set the new max value to that. 

Example code:

[[[[
int maxVal = array[0];
for(int i=1;i<array.length;i++){
   if(maxVal < array[i]){
       maxVal = array[i];
   }
}
]]]]

In addition to the array we store a new variable called maxVal. But this is only 1 number so it uses O(1) more memory. When we 

Here is a list of common Big O notation based on complexity.

* O(1)
* O(log N)
* O(N)
* O(N log N)
* O(N^^2^^)
* O(2^^N^^)
* O(N!)