## Introduction

Dijkstra's is a greedy approach to find the shortest path. It has many useful applications in networking and it can be extended to a variety of problems.

Dijkstra works by beginning at the starting node and repeatedly taking the shortest edge that can be used and has not been used yet until the end node is reached.

If Dijkstra's is implemented using a priority queue, the run time is O(n log n). 

If a negative cycle exists within the graph, then the algorithm breaks as it will repeatedly try to take the negative edges. See [[Bellman Ford]] to find negative cycles in a graph. 

A naive fix for negative cycles would be to offset all edges by the largest negative edge and then subtract it from the resulting total but this does not work. Consider an example where you have start node A and end node B. The first route from A->B has length 2 and the second route has lengths 1,1,-2. Clearly the second route has less cost. If we try to make the length positive by adding all costs by 2, we will have the first path of length 4 and the second path of lengths 3,3,0 and the first route becomes the smallest total cost which is wrong.

## Implementation

[[[[
class node{
	int weight,index;
	public node(int weight,int index){
		this.weight = weight;
		this.index = index;
	}
}

public static int dijkstra(int[][] adjMatrix,int start,int end){
	int n = adjMatrix.length;
	PriorityQueue <node> pq = new PriorityQueue<node>();
	boolean visited[] = new boolean[n];
	for(int i=0;i<n;i++)visited[i] = false;
	pq.add(new node(0,start));
	while(!visited[end] && !pq.isEmpty()){
		node curNode = pq.poll();
	
		if(visited[curNode.index])continue;
		visited[curNode.index] = true;
		if(curNode.index==end){
			return curNode.weight;
		}
		for(int i=0;i<n;i++){
			if(adjMatrix[curNode.index][i]>0 && !visited[i]){
				int newWeight = curNode.weight+adjMatrix[curNode.index][i];
				pq.add(new node(newWeight,i));
			}
		}
	}
	return -1;
}
]]]]

## Applications

In general, Dijkstra is usually the goto method for finding the minimum cost between two nodes in any kind of network. For example, Dijkstra can be used in networking to find the shortest path between two hosts. It can also be used in flight networking to find the cheapest cost to get from one airport to another airport. 

## Practice Exercises

1. Extend Dijkstra's to find the exact path from start to end (the order of nodes of the shortest path A->B->C)
2. Extend Dijkstra's to find the best three minimal costs with unique paths from the start node to the end node
3. Prove that Dijkstra's algorithm works