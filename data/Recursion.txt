## Introduction

For more advanced recursion go to: [[advanced recursion|Advanced Recursion]].

Recursion is process that repeats itself in a similar way. Anything that has its definition nested inside itself is considered to be recursive. For example GNU stands for GNU not Unix!. Expanding this acronym gives us ((GNU not Unix) not Unix!). As you can see this will go on forever and GNU's definition is nested inside itself so it is recursive. The Fibonacci sequence is also recursive: F(n) = F(n-1)+F(n-2). Inside the function F, we see two more F's! 

In computer science infinite looping is bad because computers do not know how to terminate so we need some way to stop it. A base case is the case where the recursion will stop when the recursive relation reaches the base case. For the Fibonacci sequence, the base case is F(0) = 1 and F(1) = 1 and we can see that for all N>1, the Fibonacci sequence will reach the base case.

So for something to be recursive in computer science, it needs:

* a recursive definition (contained in itself) and 
* a base case that all valid inputs will eventually reach

Template for recursion:

[[[[
recursion(parameter)
    if base_case (parameter):
        stop
    recursion( operation(parameter) )
]]]]

* *recursion* is the recursive function
* *base_case* is the check if the parameter has reached the base case
* *operation* reduces the parameters towards the base case

## Factorial

Let's look at the factorial function.

n! = 1 * 2 * 3 .... n.

Or we could write it as n! = (n-1)! * n. We now see that in this form, the factorial function is defined within itself and is recursive. We also know that 1! = 1 which is our base case.

[[[[{lang-html}
Let f(n) be the nth factorial number.

Base case:
f(1) = 1

Recurrence:
f(n) = f(n-1) * n

Example:
f(4) 
= f(3) * 4
= f(2) * 3 * 4
= f(1) * 2 * 3 * 4  [Base Case]
= 1 * 2 * 3 * 4
= 24
]]]]

Implementation:
[[[[
int factorial(int n){
   if(n==1)return 1;
   return factorial(n-1)*n;
}
]]]]

## Sum of digits of a string

We can use recursion in a lot of places and we can apply to simple problems that you have probably not thought about. Summing the digits of a string can be done using simple loop but we can also use recursion to do it.

Let's say we have an string of n digits. The sum of digits of the string is just the sum of substring to n-1 digits plus the nth digit. We can keep reducing the string into smaller parts until it is an empty string. The sum of digits in an emtpy string is simply 0 and we have our base case.

[[[[{lang-html}
Let sum(string) be the sum of digits in a string

For simplicity let string[0..a] be the substring of the string from 0 to a.

Base case:
sum(empty) = 0

Recurrence:
sum(string) = sum(string[0..n-1])+string[n]

Example:
sum('23528')
= sum('2352')+8
= (sum('235')+2)+8
= ((sum('23')+5)+2)+8
= (((sum('2')+3)+5)+2)+8
= ((((sum('')+2)+3)+5)+2)+8
= ((((0+2)+3)+5)+2)+8) [Base case]
= 20
]]]]



So the function can be written as:

[[[[
int sum(string str){
   if(str.length==0)return 0;
   else return sum(str.substring(0,str.length-1))+(str.charAt(str.length-1)-'0');
}
sum('23528');
]]]]

## Count

Let's say we have an string of N characters and we want to find the number of times the letter 'c' appears. This time we need to add some logic to the problem. 

The number of times 'c' appears in the string of N numbers is the number of times 'c' appears in the string of N-1 characters plus one if the Nth number is a 3. If the Nth number is not a 'c', then we don't add 1. 

If the array is empty then the count of 3 is obviously 0.

So now we have our recursive definition and our base case.

[[[[{lang-html}
Let count(string) be the number of 'c's in the string

For simplicity let string[0..a] be the substring of the string from 0 to a.
Let n = len(string)

Base case:
count(empty) = 0

Recurrence:
count(string) =  {if string[n]=='c'  count(string[0..n-1])+1
                 {else               count(string[0..n-1])
Example:
count('cacaec')
= count('cacae')+1
= (count('caca')+0)+1
= ((count('cac')+0)+0)+1
= (((count('ca')+1)+0)+0)+1
= ((((count('c')+0)+1)+0)+0)+1
= ((((count('')+1)+0)+1)+0)+0)+1
= ((((0+1)+0)+1)+0)+0)+1
= 3

]]]]
Java implementation:
[[[[
int count3(string str){
   if(str.length==0)return 0;
   if(str.charAt(str.length-1)=='c')return count3(str.substring(0,str.length-1))+1
   else return count3(str.substring(0,str.length-1));
}

count3('cacaec');

]]]]

## Calculate Exponential

Let's say we wanted to find x^^n^^ and for the sake of this problem we want the last four digits of that number. Note that 267^^4^^ mod 10000 = (267^^3^^ mod 10000) * 267 mod 10000. This is important because it means we can take the last 4 digits in each step instead of having to compute the giant exponent and then taking the last 4 digits. We can do this problem very easily by using a simple loop, but we can do better by using recursion. By definition of exponents, x^^a^^ * x^^a^^ = x^^2a^^. Using this we can see that if n is divisible by 2, then x^^n^^ = x^^n/2^^ * x^^n/2^^. 

But let's take a look at x^^n/2^^. If n is even we can do the exact same thing! x^^n/2^^ = x^^n/4^^ * x^^n/4^^. We have a recurrence relation and the base case is simple: if x^^1^^ = x. 

But what if n is odd and not 1? Then we have x^^n^^ = x^^n/2^^ * x^^n/2^^ * x and we can now solve this problem using recursion.

[[[[{lang-html}
Let exp(b,n) be b^n

Base case:
exp(b,1) = 1  [Since b^1 = b]

Recurrence:
exp(b,n) = {if n divisible by 2    exp(b,n/2)^2 % 10000
           {else                   (exp(b,n/2)^2)*b % 10000

Example: (for simplicity, leave out the modulus)
exp(3,10)
= exp(3,5)^2
= (exp(3,2)^2))*3)^2
= (((exp(3,1)^2)*3)^2) [Base case]
= (((3^2)^2)*3)^2)
= ((9^2)*3)^2)
= (81*3)^2
= (243)^2
= 59049
]]]]
Implementation
[[[[
int exponent(int b,int n){
   if(n==1)return b;
   if(n%2==0){
     int x = exponent(b,n/2);
     return (x * x)%10000;
   }
   else{
     int x = exponent(b,n/2);
     return (x*x*b)%10000;
   }
}

]]]]

## Exercises

1. Given an array of N integers, write a recursive function to get the sum
2. Given a string S, write a recursive function to determine if it is a palindrome.
3. Given a number N, write a recursive function to output the number in binary.