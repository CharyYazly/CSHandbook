*[ADT]: Abstract Data Type

## Introduction

Data structures are different ways of storing data such that they optimize certain data operations such as retrieval and insertion. Although many of these data structures are already built into various languages, it is important to understand how they work. By understanding the implementations, we can have a sense of which data structure to use for different scenarios.

An **abstract data type** is a conceptual model for representing data. An abstract data type tells what it should do as opposed to how it should work. It will tell us what operations it should have but should not tell us how to implement them. 

For example, a bottle should be able to hold water and allow us to drink from. This tells us what it should do but we don't need to know how it works or how it is made. A plastic water bottle is an implementation of a bottle. It holds water in its interior and allows us to drink by unscrewing the cap and letting us pour water down our throat. A thermos is also an implementation of the bottle, it holds fluid inside it, but this thermos has a lid that can be popped open and water can come from it. A thermos and plastic water bottle are different implementations as they are made differently and used differently, but they fundamentally do what a bottle is supposed to do: store liquid, and provide a way to drink. A bottle does not actually exist, but types of bottles do.

{{bottle.png}}

Some implementations of abstract data types are better than others for different purposes. For example plastic water bottles are very cheap whereas a thermos is more expensive but a thermos can hold hot water and keep it warm for a long period of time. When selecting a data structure, we should analyze the efficiencies of data operations that we will do most often.

{{adt.png}}

For more intermediate data structures, read the [[advanced data structures|Advanced Data Structures]] page.

## [[Stack]]

((((Stack.Introduction))))

### [[Vector]]

((((Vector.Introduction))))

## [[Queue]]

((((Queue.Introduction))))

### [[Linked List]] 

((((Linked List.Introduction))))

## [[Trees]]

((((Trees.Introduction))))

### [[Binary Tree]]

((((Binary Tree.Introduction))))

{{binarytree.png}}

## [[Sets]]

((((Sets.Introduction))))


### [[Hash Set]]

((((Hash Set.Introduction))))

### [[Tree Set]]

((((Tree Set.Introduction))))


## [[Maps]]

((((Maps.Introduction))))

###[[Hash Map]]

((((Hash Map.Introduction))))

### [[Tree Map]]

((((Tree Map.Introduction))))

## [[Priority Queue]]

((((Priority Queue.Introduction))))

### [[Heap]]

((((Heap.Introduction))))

