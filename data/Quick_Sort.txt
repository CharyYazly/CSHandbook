## Introduction

Quick Sort is another fast sorting algorithm that uses divide and conquer. It is also known as partition-exchange sort or as Hoare's quicksort (named after the author).

In Quick Sort an element is selected as a "pivot". The list is then divided into two sublists: a list of elements less than (or equal to) the pivot and a list of elements greater than the pivot. Each sublist is sorted (conquered) and then appended together along with the origin pivot.

In the best case (if the pivot that is chosen is exactly the middle element), then the runtime is O(n log n). However, in the worst case, the runtime for Quick Sort is n^^2^^. Despite its worst case behaviour, quick sort is still popular and in widespread use. The average case behaviour is quite good and there are straightforward methods that can be used to improve the selection of the pivot.

The sorting algorithms are implemented to sort integer arrays but can be adapted to sort arrays of any data structure that is comparable. 

## Implementation

{{quicksort.png}}

### Formalization

[[[[
Let quicksort(array) sort the array using quicksort

Base case:
quicksort([]) = []
quicksort([x]) = [x]

Recurrence:
Let pivot be a random element in array

quicksort(array) = quicksort([elements < pivot]) + [pivot] + quicksort([elements >= pivot])

Example:
quicksort([6,1,4,3,5,7,9,2,8,0])
= quicksort([1,4,3,2,0] + [5] + quicksort([6,7,9,8])
= (quicksort([1,2,0]) + [3] + quicksort([4])) + [5] + (quicksort([6]) + [7] + quicksort([9,8]))
= (quicksort([0,1]) + [2] + quicksort([]) + [3] + [4]) + [5] + ([6] + [7] + [8, 9])
= (([0, 1] + [2] + []) + [3] + [4]) + [5] + ([6] + [7] + [8, 9])
= [0, 1, 2, 3, 4] + [5] + [6, 7, 8, 9]
= [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
]]]]

### Code

[[[[
//sorts integers from smallest to greatest
public static void QuickSort (int a[], int first, int last){
	//first is the starting index of the list
	//last is the last index of the list
	//QuickSort can be called by QuickSort(a, 0, a.length-1)
	
	if (last <= first) return; //if the array size <= 1
	
	int pivot = a[first]; //picks the first element as the pivot
	// the location to put the next integer that's larger than the pivot
	int index = last;  
	
	//iterate through the list, sorting it by the first pivot
	for (int i=last;i>=first+1;i--){
		if (a[i]>=pivot){
			//swap the current element to be on the side that's 
			//larger than the pivot
			int temp = a[index];
			a[index] = a[i];
			a[i] = temp;
			
			//decrements index for the next switch
			index--;
		}
	}
	
	//swap the element at index with the pivot so that it's 
	//in the right place
	int temp = pivot;
	a[first] = a[index];
	a[index] = pivot;
	
	//recursively sort the lists less than and greater than the pivot
	QuickSort (a, first, index-1);
	QuickSort (a, index+1, last);
}
]]]]