## Introduction

An array is the most basic data structure that holds a number of fixed elements of the same type in a block of data. The fact that it is in one block and the same type is important because it allows accessing the ith element in constant time. For example if an array is at location 0x4000 that contains 10 integers (4 bytes), then getting the ith element is simple as reading the integer at 0x4000 + (4 * i).

However if you want to insert an element into an array at the ith position you will need to move everything past the ith element by 1 and similarly with deletion.

Since arrays are fixed length, if you wanted to add more elements when your array is already full, you will need to allocate a new array of larger size.

Arrays can be multidimensional meaning you can have an array of array of objects.

[[======]]

##Create array

Creating an array allocates a block of memory for us to store the elements. 

[========]

###Implementation

[[[[
public static int[] createArray(int size){
     int[] array = new int[size];
     return array;
}
]]]]

[=====]

## Get Element at Index

When we want to get the element of an index all we have to do is offset the index by the array. However we need to check th

[[[[
public static int getElemenent(int[] arr, int i){
    if(i<0 || i>=arr.length){
        throw new ArrayIndexOutOfBoundsException();
    }
    return arr[i];
}
]]]]

[[===============================]]


## Insert Element
[[[[
public static int[] insertElement(int[] arr,int index,int e){
	int[] arr2 = new int[arr.length+1];
	//Copy element up to index of insertion
	for(int i=0;i<index;i++){
		arr2[i] = arr[i];
	}
	//Copy evrything after index of insertion
	for(int i=index;i<arr.length;i++){
		arr2[i+1] = arr[i];
	}
	//Set inserted element
	arr2[index] = e;
	return arr2;
}
]]]]