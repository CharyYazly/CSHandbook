## Introduction

A [[minimum spanning tree|Minimum Spanning Tree]] is a tree in a graph that connects all the nodes using the smallest cost total cost of edges. 

Kruskal's algorithm finds the [[minimum spanning tree|Minimum Spanning Tree]] using [[connected components|Connected Components]].

If implemented efficiently using a priority queue to get the edges with minimum weight or a sorting the edges, the runtime is O(n log n).

## Implementation

1. Uniquely label each node
2. Take the edge with the minimum weight
3. If the edge connects nodes A and B with different labels, all nodes with label B will be labeled with A. Otherwise, throw the edge away
4. Repeat 2-3 until all the nodes have the same label

### Example

{{kruskal.png}}

{{kruskal2.png}}

{{kruskal3.png}}

{{kruskal4.png}}

{{kruskal5.png}}

{{kruskal6.png}}

{{kruskal7.png}}

### Code

[[[[
class edge implements Comparable<edge>{
	int weight,source,dest;
	public edge(int source,int dest,int weight){
		this.source = source;
		this.dest = dest;
		this.weight = weight;
	}
	public int compareTo(edge e){
		return weight-e.weight;
	}
}
public static int getParent(int parents[],int x){
	if(parents[x]==x)return x;
	parents[x] = getParent(parents,parents[x]);
	return parents[x];
}
public static int Kruskal(Vector<Vector<edge>> adjList){
	int n = adjList.size();
	int parents[] = new int[n];
	for(int i=0;i<n;i++)parents[i] = i;
	int sum = 0;
	
	PriorityQueue<edge> edges = new PriorityQueue<edge>();
	
	for(int i=0;i<n;i++){
		for(int j=0;j<adjList.get(i).size();j++){
			edges.add(adjList.get(i).get(j));
		}
	}
	
	while(!edges.isEmpty()){
		edge e = edges.poll();
		if(getParent(parents,e.source)!=getParent(parents,e.dest)){
			parents[e.source] = getParent(parents,e.dest);
			sum+=e.weight;
		}
	}
	
	return sum;
}
]]]]

## Applications

## Exercises

1. Prove Kruskal's Algorithm works
2. Extends Kruskals's to output all the edges used
3. Given a weighted graph with n nodes, find the smallest total cost to connect all nodes into 3 separate groups. (A single node can be a group)
4. Same as 3, but a group must contain at least 3 other nodes.