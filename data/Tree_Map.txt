## Introduction

*Prerequisites:* [[Tree Set]], [[Map]]

A tree map is a map that stores the key value pairs in a tree set.

Operation | Membership | Insertion | Deletion
-|-
Complexity  | O(log n) | O(log n) | O(log n)

## Implementation

Here is a Java implementation of a tree map:

{{bst.png}}

### Class


A pair is a key with a value. In this implementation we will use the value as a string.

[[[[
class Pair{
	int key;
	String value;
	public Pair(int key,String value){
		this.key = key;
		this.value = value;
	}
}
]]]]

A node is a node contained in the binary search tree. The node must store the child nodes and for simplicity of the implementation, we will store the parent node as well. Each node will also have a key value pair associated with it.

[[[[
class Node{
	Pair pair;
	Node left;
	Node right;
	Node parent;
	public Node(Pair p){
		this.pair = p;
		this.left = null;
		this.right = null;
		this.parent = null;
	}
	public void replaceChild(Node child,Node replacement){
		if(left==child){
			left = replacement;
				if(replacement!= null){
					replacement.parent = this;
				}
			}
			if(right==child){
				right = replacement;
				if(replacement!= null){
					replacement.parent = this;
				}
			}
		}
	}
}
]]]]

In our tree map, we will store the root node (ancestor of all nodes) and the number of numbers.

[[[[
public class TreeMap {

	int size;
	Node root;
	
	public TreeMap(){
		size = 0;
		root = null;
	}
}
]]]]


### Insert

To insert a key-value pair into the tree set, we first find where the key should be. If the key already exists, 

[[[[
public boolean insert(Pair p){
	if(root==null){
		root = new Node(p);
		return true;
	}
	Node curTree = root;		
	while(curTree != null){
		if(p.key == curTree.pair.key){
			return false;
		}else if(p.key < curTree.pair.key){
			if(curTree.left == null){
				Node newTree = new Node(p);
				newTree.parent = curTree;
				curTree.left = newTree;
				return true;
			}
			curTree = curTree.left;
		}else {
			if(curTree.right == null){
				Node newTree = new Node(p);
				newTree.parent = curTree;
				curTree.right = newTree;
				return true;
			}
			curTree = curTree.right;
		}
	}
	return false;
}
]]]]

### Get

To get the value from a key stored in a tree set, we binary search for the key and then retrieve the key-value pair located at the node.

[[[[
public Pair get(int key){
	Node curTree = root;
	while(curTree!=null){
		if(key==curTree.pair.key){
			return curTree.pair;
		}else if(key<curTree.pair.key){
			curTree = curTree.left;
		}else{
			curTree = curTree.right;
		}
	}
	return null;
}
]]]]

### Remove

Removing an element is a much more complex because we need to maintain the tree structure of the tree set when removing elements. First we locate the element that we want to remove. If the element is not there then the operation failed and we return false. If the element is there then are three cases we need to consider. 

{{bst-rem.png}}

**Case 1: Node is a leaf node**

{{bst-rem-case11.png}}

If the node we want to remove is the leaf node, we can simply remove it.

{{bst-rem-case12.png}}

**Case 2: Node has one child**

{{bst-rem-case21.png}}

If the node we want to remove has a child, we can replace that node with its' only child.

{{bst-rem-case22.png}}

**Case 3: Node has two children**

{{bst-rem-case31.png}}

We need to replace the node with the **rightmost** of the *left* subtree or the **leftmost** of the *right* subtree to maintain the order.

{{bst-rem-case32.png}}

It does not matter which side we pick so we will use the **rightmost** of the *left* subtree. First we copy the value of the rightmost of the left subtree into the node that will be deleted. 

{{bst-rem-case33.png}}

Then we replace the rightmost of the left subtree with its left subtree.

{{bst-rem-case34.png}}

[[[[
public boolean remove(int key){
	//Get node to remove
	Node curNode = root;
	while(curNode!=null){
		if(key==curNode.pair.key){
			break;
		}else if(key<curNode.pair.key){
			curNode = curNode.left;
		}else{
			curNode = curNode.right;
		}
	}
	if(curNode==null){
		return false;
	}
	//Case 1: leaf node
	if(curNode.left==null && curNode.right==null){
		//if root
		if(curNode==root){
			this.root = null;
		}else{
			curNode.parent.replaceChild(curNode,null);
		}
	}
	//Case 2: one child
	else if(curNode.left==null){
		//If root
		if(curNode==root){
			root = curNode.right;
			root.parent = null;
		}else {
			curNode.parent.replaceChild(curNode,curNode.right);
		}
	}
	else if(curNode.right==null){
		//If root
		if(curNode==root){
			root = curNode.left;
			root.parent = null;
		}else {
			curNode.parent.replaceChild(curNode,curNode.left);
		}
	}
	//Case 3: two children
	else {
		//Get rightmost of left subtree
		Node rightmost = curNode.left;
		while(rightmost.right!=null){
			rightmost = rightmost.right;
		}
		curNode.pair = rightmost.pair;
		rightmost.parent.replaceChild(rightmost, rightmost.left);
	}
	size--;
	return true;
}
]]]]

## Exercises 

1. Given a list of N numbers, output the first M unique numbers.